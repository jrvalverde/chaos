head	1.3;
access;
symbols;
locks
	jr:1.3; strict;
comment	@ * @;


1.3
date	2008.03.01.12.02.53;	author jr;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.01.12.02.14;	author jr;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.01.12.00.06;	author jr;	state Exp;
branches;
next	;


desc
@map of newton's method for solving z^3 = 1
@


1.3
log
@ map of newton's method for solving z^3 = 1 (using true color)
@
text
@/*          ษอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป
            บ                                                               บ
		  บ                                                    3          บ
		  บ      cnewton = MAP OF NEWTON'S METHOD FOR SOLVING Z  =  1     บ
            บ                                                               บ
            ศอออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ
*/
#include <stdio.h>
#include <math.h>
#ifndef DOS
#include <grx20.h>
#include <grxkeys.h>
#else				/* 
				 */
#include <graph.h>
#endif				/* 
				 */

int maxcol = 639;

int maxrow = 349;

int max_colors = 16;

GrColor *egacolors;


int max_iterations = 64;

int max_size = 4;

float Xmax = 3.5, Xmin = -3.5, Ymax = 2.50, Ymin = -2.50;


void _setvideomode(int i)
{

    GrSetDriver("xwin");


    GrSetMode(GR_width_height_color_graphics, 640, 350, (GrColor) 256);

    egacolors = GrAllocEgaColors();

    GrSetRGBcolorMode();

}

void _clearscreen(int color)
{

    GrClearScreen(GrWhite());

}

int _color;


void _setcolor(int i)
{

//    _color = egacolors[i];
    _color = i;
}

void _setpixel_w(int col, int row)
{

    GrPlot(col, row, _color);

}

void getch()
{

    GrKeyRead();

}

main()
{

    double deltaX, deltaY, X, Y, Xsquare, Xold, Yold,
	Ysquare, Ytemp, temp1, temp2, denom, theta;

    int color, row, col, i;


    _setvideomode(16);

    _clearscreen(0);

    deltaX = (Xmax - Xmin) / (maxcol * 1.0);

    deltaY = (Ymax - Ymin) / (maxrow * 1.0);

    for (col = 0; col <= maxcol; col++)
    {

	for (row = 0; row <= maxrow; row++)
	{

	    X = Xmin + col * deltaX;

	    Y = Ymax - row * deltaY;

	    Ysquare = Xsquare = 0;

	    Yold = Xold = 42;

	    for (i = 0; i < max_iterations; i++)
	    {

		Xsquare = X * X;
		Ysquare = Y * Y;

		denom =
		    3 * ((Xsquare - Ysquare) * (Xsquare - Ysquare) +
			 4 * Xsquare * Ysquare);

		if (denom == 0)
		    denom = .00000001;

		X = .6666667 * X + (Xsquare - Ysquare) / (denom * 1.0);

		Y = .6666667 * Y - 2 * X * Y / (denom * 1.0);


		if ((Xold == X) && (Yold == Y))
		    break;

		Xold = X;
		Yold = Y;

	    }

	    if (X > 0)
		color = i * 4;	/* scale up to 256 Blue*/

	    else
	    {
		if ((X < -.3) && (Y > 0))
		    color = (i * 4) << 8;   /* scale up to 256 Green */

		else
		    color = (i *4) << 16;   /* scale up to 256 Red */
	    }


	    _setcolor(color);

	    _setpixel_w(col, row);

	}

    }

    getch();

}
@


1.2
log
@ map of newton's method for solving z^3 = 1 (using compatibility routines)
@
text
@d43 1
d45 1
a45 1
    egacolors = GrAllocEgaColors();
d62 2
a63 2
    _color = egacolors[i];

d138 1
a138 1
		color = i % 5;
d143 1
a143 1
		    color = (i % 5) + 5;
d146 1
a146 1
		    color = (i % 6) + 10;
@


1.1
log
@Initial revision
@
text
@d1 6
a6 2
/*
    cnewton 3 = map of newton's method for solving z^3 = 1
a7 1

d10 1
a10 1

d13 11
a24 3
const int maxcol = 639;
const int maxrow = 349;
const int maxcolors = 16;
d27 1
a27 2
char strings[80];
int col, row, i;
d29 1
a30 7
int LINEWIDTH = 1,
    OPERATOR = 0,
    ANGLE, XCENTER, YCENTER;
int CURSOR_X = 0,
    CURSOR_Y = 0;
unsigned long int PATTERN = 0xFFFFFFFF;
float Xmax = 3.5, Xmin = -3.5, Ymax = 2.5, Ymin = -2.5;
d32 4
a35 1
main()
d37 1
a37 4
    double deltaX, deltaY, X, Y, Xsquare, Xold, Yold,
    	   Ysquare, Ytemp, temp1, temp2, denom, theta;
    int color, row, col;
    
d40 1
d43 8
d53 40
a92 2
    egacolors = GrAllocEgaColors();
    /* RGB colors are in 0xRRGGBB format */
d94 1
a94 2
    deltaX = (Xmax - Xmin) / maxcol;
    deltaY = (Ymax - Ymin) / maxrow;
d98 2
a99 1
    	for (row = 0; row <= maxrow; row++)
d101 1
d103 1
d105 5
a109 4
	    Xsquare = 0;
	    Ysquare = 0;
	    Xold = 42;
	    Yold = 42;
d112 2
a113 1
	    	Xsquare = X * X;
d115 5
a119 2
		denom = 3 * ((Xsquare - Ysquare) * (Xsquare - Ysquare) +
		    	4 * Xsquare * Ysquare);
d121 7
a127 4
		    denom = .0000001;
		temp1 = .6666667 * X + (Xsquare - Ysquare) / denom;
		Y = .6666667 * Y - 2 * X * Y / denom;
		X = temp1;
d130 1
d133 1
d135 1
d137 2
a138 1
	    	color = egacolors[i%5];
d141 3
a143 2
	    	if ((X < -.3) && (Y < 0))
		    color = egacolors[(i%5) + 5];
d145 1
a145 1
		    color = egacolors[(i %6) + 10];
d147 6
a152 1
	    GrPlot(col, row, color);
d154 1
d156 3
a158 1
    GrKeyRead();
@
